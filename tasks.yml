# name: "Frontend Location Management App Generator"
# description: |
#   Generates a complete, maintainable, senior-level frontend codebase for the Full-Stack Location Management Application.
#   Must use React + Vite + TypeScript + Tailwind CSS + Zustand + React Query + react-router-dom + react-leaflet.
#   Code must be modular, readable, and follow best practices.
#   All API requests must use a centralized Axios instance with strong TypeScript typing.
#   Ensure HttpOnly cookie-based JWT authentication is supported by setting `withCredentials: true` in Axios.
#   **The code must be generated inside the existing `client` folder.**
# instructions: |
#   - Implement 4 main pages:
#       1. **Registration Page**: User sign-up form with validation and API integration.
#       2. **Login Page**: User login form with validation and API integration.
#       3. **Map Page**: 
#          - Interactive Leaflet map showing only the logged-in user's locations.
#          - Form to add new locations instantly without page reload.
#          - Clickable markers displaying location names.
#          - Data fetched and updated in real time using React Query.
#       4. **File Upload Page**:
#          - Single ZIP upload containing exactly one `.txt` file with location data.
#          - If valid, show success popup for 3s and add locations to map instantly.
#          - If invalid, show error popup for 3s.
#   - Use a **sidebar navigation** with logout button to switch between pages.
#   - Protect Map and File Upload routes so unauthenticated users are redirected to login.
#   - Use Zustand for auth & UI state management.
#   - Centralize API calls in `src/lib/apiClient.ts`:
#       ```ts
#       import axios from 'axios';

#       export const apiClient = axios.create({
#         baseURL: import.meta.env.VITE_API_URL,
#         withCredentials: true,
#         headers: {
#           'Content-Type': 'application/json',
#         },
#       });

#       export async function request<T>(config: Parameters<typeof apiClient>[0]): Promise<T> {
#         try {
#           const response = await apiClient(config);
#           return response.data as T;
#         } catch (error: any) {
#           if (error.response?.data?.message) {
#             throw new Error(error.response.data.message);
#           }
#           throw error;
#         }
#       }
#       ```
#   - Use React Query hooks to fetch & mutate data.
#   - Include strong TypeScript types for all API responses.
#   - Maintain folder structure:
#       ```
#       src/
#         components/     # Reusable UI components
#         pages/          # Page components
#         hooks/          # React Query hooks
#         lib/            # Utilities (apiClient, constants)
#         store/          # Zustand store
#         types/          # TypeScript type definitions
#         styles/         # Tailwind config & global styles
#       ```
#   - Code must be production-ready, maintainable, and readable, following a senior-level standard.

# description: fix the error
# instructions:
#   - It looks like you're trying to use `tailwindcss` directly as a PostCSS plugin. The PostCSS plugin has moved to a separate package, so to continue using Tailwind CSS with PostCSS you'll need to install `@tailwindcss/postcss` and update your PostCSS configuration.


name: "Frontend-Backend Route Alignment"
description: |
  The backend (PostgreSQL + Express) is already working with proper CORS and cookie-based JWT authentication.
  Your job is to generate the frontend inside the existing `client` folder and ensure all API calls match the backend's actual routes.
instructions: |
  - Before coding, inspect the backend API routes and confirm the correct paths (e.g., `/api/auth/login`, `/api/auth/register`, `/api/locations`, etc.).
  - Use those exact routes in the frontend when calling APIs.
  - All API calls must use:
      - Centralized Axios instance in `src/lib/apiClient.ts`
      - `withCredentials: true`
      - `baseURL` from `import.meta.env.VITE_API_URL`
  - Create `.env` in the `client` folder:
      ```
      VITE_API_URL=http://localhost:5000
      ```
  - Do NOT modify backend code â€” only align the frontend to its routes.
  - Ensure authentication flows (login, register) match backend expectations for request body, headers, and response formats.
  - Protect routes in the frontend based on authentication state.
